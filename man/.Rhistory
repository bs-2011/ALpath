xty <- merge(xt,y2m)
plot.zoo(xty)
head(xty)
head(y2m)
head(y)
heat(xt)
head(xt)
tail(xt)
tail(y)
?merge
xty <- merge(xt,y,by.x =by)
indexFormat(y) <- "%Y-%b-%d"
head(y)
xty <- merge(xt,y)
head(xty)
View(xty)
View(xty)
indexFormat(xt)
index(xt)
index(y)
xty <- merge.zoo(xt,y)
?merge.zoo
xty <- merge.xts(xt,y)
?merge.xts
xty <- merge.xts(xt,y,join = "left")
head(xty)
str(y)
y2 <- y["2010/2015"]
str(y)
head(y)
str(xt)
str(x)
index(y)
index(x) <- index(y)
rownames(x) <- index(y)
xt1 <-as.xts(x)
head(x)
x <- readRDS("flights.Rdata")
write.csv(x,"flights.csv")
y <- readRDS("temps_monthly.Rdata")
write.csv(,"temp.csv")
write.csv(y,"temp.csv")
z <- readRDS("wind.Rdata")
write.csv(z,"wind.csv")
plot.zoo(xt)
plot.zoo(y)
plot.zoo(z)
head(y)
head(z)
plot.zoo(y)
cor(x$delay_flights,y)
cor(x$cancel_flights,y)
cor(x$divert_flights,y)
cor(x,y,z)
cor(x$delay_flights,x$cancel_flights,y,z)
MyData <- read.csv(file="Family Income and Expenditure.csv", header=TRUE, sep=",")
head(MyData)
nums <- sapply(MyData, is.numeric)
MyData[,nums]
mydata <-MyData[,nums]
colnames(mydata)
?lm
lmodel <- lm(Total.Household.Income~.,mydata)
summary(lmodel)
MyData <- read.csv(file="Family Income and Expenditure.csv", header=TRUE, sep=",")
mydata <-sapply(MyData, is.numeric)
colnames(mydata)
head(mydata)
head(MyData)
num <-sapply(MyData, is.numeric)
mydata <- MyData[,num]
head(mydata)
colnames(mydata)
lmodel <- lm(Total.Household.Income~.,mydata)
lmodel$residuals
plot(residuals(lmodel))
hist(residuals(lmodel), probability=T, col='lightblue')
lines(density(residuals(lmodel)), col=2, lwd=2)
qqnorm(residuals(lmodel))
qqline(residuals(lmodel), col=2,lwd=2)
a<-pnorm(residuals(lmodel), 0, summary(lmodel)$sigma)
plot( ppoints(length(a)), sort(a), xlab='Theoretical Percentiles',
ylab='Sample Percentiles', main="P-P-Plot" )
abline(0,1, col=2)
lmodel$df.residual
MyData <- read.csv(file="final.csv", header=TRUE, sep=",")
num <-sapply(MyData, is.numeric)
mydata <- MyData[,num]
lmodel <- lm(Total.Household.Income~.,mydata)
plot(residuals(lmodel))
hist(residuals(lmodel), probability=T, col='lightblue')
lines(density(residuals(lmodel)), col=2, lwd=2)
qqnorm(residuals(lmodel))
qqline(residuals(lmodel), col=2,lwd=2)
a<-pnorm(residuals(lmodel), 0, summary(lmodel)$sigma)
plot( ppoints(length(a)), sort(a), xlab='Theoretical Percentiles',
ylab='Sample Percentiles', main="P-P-Plot" )
abline(0,1, col=2)
nrow(mydata)
length(mydata)
str(mydata)
hist(residuals(lmodel), probability=T, col='lightblue',breaks = sqrt(nrow(mydata)))
lines(density(residuals(lmodel)), col=2, lwd=2)
hist(residuals(lmodel), probability=T, col='lightblue',breaks = 50)
lines(density(residuals(lmodel)), col=2, lwd=2)
plot(residuals(lmodel))
hist(residuals(lmodel), probability=T, col='lightblue',breaks = 50)
lines(density(residuals(lmodel)), col=2, lwd=2)
qqnorm(residuals(lmodel))
qqline(residuals(lmodel), col=2,lwd=2)
a<-pnorm(residuals(lmodel), 0, summary(lmodel)$sigma)
plot( ppoints(length(a)), sort(a), xlab='Theoretical Percentiles',
ylab='Sample Percentiles', main="P-P-Plot" )
abline(0,1, col=2)
summary(lmodel)
install.packages("car")
library(car)
outlierTest(lmodel)
summary(lmodel)
outlierTest(lmodel)
max(lmodel$residuals)
min(lmodel$residuals)
# Import the necessary packages and set
# random seed for replication consistency
install.packages('depmixS4')
install.packages('quantmod')
library('depmixS4')
library('quantmod')
set.seed(1)
# Create the parameters for the bull and
# bear market returns distributions
Nk_lower <- 50
Nk_upper <- 150
bull_mean <- 0.1
bull_var <- 0.1
bear_mean <- -0.05
bear_var <- 0.2
# Create the list of durations (in days) for each regime
days <- replicate(5, sample(Nk_lower:Nk_upper, 1))
# Create the various bull and bear markets returns
market_bull_1 <- rnorm( days[1], bull_mean, bull_var )
market_bear_2 <- rnorm( days[2], bear_mean, bear_var )
market_bull_3 <- rnorm( days[3], bull_mean, bull_var )
market_bear_4 <- rnorm( days[4], bear_mean, bear_var )
market_bull_5 <- rnorm( days[5], bull_mean, bull_var )
# Create the list of true regime states and full returns list
true_regimes <- c( rep(1,days[1]), rep(2,days[2]), rep(1,days[3]), rep(2,days[4]), rep(1,days[5]))
returns <- c( market_bull_1, market_bear_2, market_bull_3, market_bear_4, market_bull_5)
# Create and fit the Hidden Markov Model
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 2, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Output both the true regimes and the
# posterior probabilities of the regimes
layout(1:2)
plot(post_probs$state, type='s', main='True Regimes', xlab='', ylab='Regime')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Bull','Bear'), fill=1:2, bty='n')
# Obtain S&P500 data from 2004 onwards and
# create the returns stream from this
getSymbols( "^GSPC", from="2004-01-01" )
gspcRets = diff( log( Cl( GSPC ) ) )
returns = as.numeric(gspcRets)
# Fit a Hidden Markov Model with two states
# to the S&P500 returns stream
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 2, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Plot the returns stream and the posterior
# probabilities of the separate regimes
layout(1:2)
plot(returns, type='l', main='Regime Detection', xlab='', ylab='Returns')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Regime #1','Regime #2'), fill=1:2, bty='n')
# Fit a Hidden Markov Model with three states to the S&P500 returns stream
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 3, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Plot the returns stream
# probabilities of the separate regimes
layout(1:2)
plot(returns, type='l', main='Regime Detection', xlab='', ylab='Returns')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='bottomleft', c('Regime #1','Regime #2', 'Regime #3'), fill=1:3, bty='n')
install.packages("depmixS4")
# Create the parameters for the bull and
# bear market returns distributions
Nk_lower <- 50
Nk_upper <- 150
bull_mean <- 0.1
bull_var <- 0.1
bear_mean <- -0.05
bear_var <- 0.2
# Create the list of durations (in days) for each regime
days <- replicate(5, sample(Nk_lower:Nk_upper, 1))
# Create the various bull and bear markets returns
market_bull_1 <- rnorm( days[1], bull_mean, bull_var )
market_bear_2 <- rnorm( days[2], bear_mean, bear_var )
market_bull_3 <- rnorm( days[3], bull_mean, bull_var )
market_bear_4 <- rnorm( days[4], bear_mean, bear_var )
market_bull_5 <- rnorm( days[5], bull_mean, bull_var )
# Create the list of true regime states and full returns list
true_regimes <- c( rep(1,days[1]), rep(2,days[2]), rep(1,days[3]), rep(2,days[4]), rep(1,days[5]))
returns <- c( market_bull_1, market_bear_2, market_bull_3, market_bear_4, market_bull_5)
# Create and fit the Hidden Markov Model
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 2, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Output both the true regimes and the
# posterior probabilities of the regimes
layout(1:2)
plot(post_probs$state, type='s', main='True Regimes', xlab='', ylab='Regime')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Bull','Bear'), fill=1:2, bty='n')
# Obtain S&P500 data from 2004 onwards and
# create the returns stream from this
getSymbols( "^GSPC", from="2004-01-01" )
gspcRets = diff( log( Cl( GSPC ) ) )
returns = as.numeric(gspcRets)
# Fit a Hidden Markov Model with two states
# to the S&P500 returns stream
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 2, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Plot the returns stream and the posterior
# probabilities of the separate regimes
layout(1:2)
plot(returns, type='l', main='Regime Detection', xlab='', ylab='Returns')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Regime #1','Regime #2'), fill=1:2, bty='n')
# Fit a Hidden Markov Model with three states to the S&P500 returns stream
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 3, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Plot the returns stream
# probabilities of the separate regimes
layout(1:2)
plot(returns, type='l', main='Regime Detection', xlab='', ylab='Returns')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='bottomleft', c('Regime #1','Regime #2', 'Regime #3'), fill=1:3, bty='n')
# Import the necessary packages and set
# random seed for replication consistency
install.packages('depmixS4')
install.packages('quantmod')
library('depmixS4')
library('quantmod')
set.seed(1)
# Create the parameters for the bull and
# bear market returns distributions
Nk_lower <- 50
Nk_upper <- 150
bull_mean <- 0.1
bull_var <- 0.1
bear_mean <- -0.05
bear_var <- 0.2
# Create the list of durations (in days) for each regime
days <- replicate(5, sample(Nk_lower:Nk_upper, 1))
# Create the various bull and bear markets returns
market_bull_1 <- rnorm( days[1], bull_mean, bull_var )
market_bear_2 <- rnorm( days[2], bear_mean, bear_var )
market_bull_3 <- rnorm( days[3], bull_mean, bull_var )
market_bear_4 <- rnorm( days[4], bear_mean, bear_var )
market_bull_5 <- rnorm( days[5], bull_mean, bull_var )
# Create the list of true regime states and full returns list
true_regimes <- c( rep(1,days[1]), rep(2,days[2]), rep(1,days[3]), rep(2,days[4]), rep(1,days[5]))
returns <- c( market_bull_1, market_bear_2, market_bull_3, market_bear_4, market_bull_5)
# Create and fit the Hidden Markov Model
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 2, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Output both the true regimes and the
# posterior probabilities of the regimes
layout(1:2)
plot(post_probs$state, type='s', main='True Regimes', xlab='', ylab='Regime')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Bull','Bear'), fill=1:2, bty='n')
# Obtain S&P500 data from 2004 onwards and
# create the returns stream from this
getSymbols( "^GSPC", from="2004-01-01" )
gspcRets = diff( log( Cl( GSPC ) ) )
returns = as.numeric(gspcRets)
# Fit a Hidden Markov Model with two states
# to the S&P500 returns stream
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 2, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Plot the returns stream and the posterior
# probabilities of the separate regimes
layout(1:2)
plot(returns, type='l', main='Regime Detection', xlab='', ylab='Returns')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Regime #1','Regime #2'), fill=1:2, bty='n')
# Fit a Hidden Markov Model with three states to the S&P500 returns stream
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 3, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Plot the returns stream
# probabilities of the separate regimes
layout(1:2)
plot(returns, type='l', main='Regime Detection', xlab='', ylab='Returns')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='bottomleft', c('Regime #1','Regime #2', 'Regime #3'), fill=1:3, bty='n')
install.packages("depmixS4")
install.packages("quantmod")
install.packages("quantmod")
# Import the necessary packages and set
# random seed for replication consistency
install.packages('depmixS4')
install.packages('quantmod')
library('depmixS4')
library('quantmod')
set.seed(1)
# Create the parameters for the bull and
# bear market returns distributions
Nk_lower <- 50
Nk_upper <- 150
bull_mean <- 0.1
bull_var <- 0.1
bear_mean <- -0.05
bear_var <- 0.2
# Create the list of durations (in days) for each regime
days <- replicate(5, sample(Nk_lower:Nk_upper, 1))
# Create the various bull and bear markets returns
market_bull_1 <- rnorm( days[1], bull_mean, bull_var )
market_bear_2 <- rnorm( days[2], bear_mean, bear_var )
market_bull_3 <- rnorm( days[3], bull_mean, bull_var )
market_bear_4 <- rnorm( days[4], bear_mean, bear_var )
market_bull_5 <- rnorm( days[5], bull_mean, bull_var )
# Create the list of true regime states and full returns list
true_regimes <- c( rep(1,days[1]), rep(2,days[2]), rep(1,days[3]), rep(2,days[4]), rep(1,days[5]))
returns <- c( market_bull_1, market_bear_2, market_bull_3, market_bear_4, market_bull_5)
# Create and fit the Hidden Markov Model
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 2, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Output both the true regimes and the
# posterior probabilities of the regimes
layout(1:2)
plot(post_probs$state, type='s', main='True Regimes', xlab='', ylab='Regime')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Bull','Bear'), fill=1:2, bty='n')
# Obtain S&P500 data from 2004 onwards and
# create the returns stream from this
getSymbols( "^GSPC", from="2004-01-01" )
gspcRets = diff( log( Cl( GSPC ) ) )
returns = as.numeric(gspcRets)
# Fit a Hidden Markov Model with two states
# to the S&P500 returns stream
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 2, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Plot the returns stream and the posterior
# probabilities of the separate regimes
layout(1:2)
plot(returns, type='l', main='Regime Detection', xlab='', ylab='Returns')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Regime #1','Regime #2'), fill=1:2, bty='n')
# Fit a Hidden Markov Model with three states to the S&P500 returns stream
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 3, data=data.frame(returns=returns))
# Import the necessary packages and set
# random seed for replication consistency
install.packages('depmixS4')
install.packages('quantmod')
# Import the necessary packages and set
# random seed for replication consistency
install.packages('depmixS4')
install.packages('quantmod')
library('depmixS4')
library('quantmod')
set.seed(1)
# Create the parameters for the bull and
# bear market returns distributions
Nk_lower <- 50
Nk_upper <- 150
bull_mean <- 0.1
bull_var <- 0.1
bear_mean <- -0.05
bear_var <- 0.2
# Create the list of durations (in days) for each regime
days <- replicate(5, sample(Nk_lower:Nk_upper, 1))
# Create the various bull and bear markets returns
market_bull_1 <- rnorm( days[1], bull_mean, bull_var )
market_bear_2 <- rnorm( days[2], bear_mean, bear_var )
market_bull_3 <- rnorm( days[3], bull_mean, bull_var )
market_bear_4 <- rnorm( days[4], bear_mean, bear_var )
market_bull_5 <- rnorm( days[5], bull_mean, bull_var )
# Create the list of true regime states and full returns list
true_regimes <- c( rep(1,days[1]), rep(2,days[2]), rep(1,days[3]), rep(2,days[4]), rep(1,days[5]))
returns <- c( market_bull_1, market_bear_2, market_bull_3, market_bear_4, market_bull_5)
# Create and fit the Hidden Markov Model
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 2, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Output both the true regimes and the
# posterior probabilities of the regimes
layout(1:2)
plot(post_probs$state, type='s', main='True Regimes', xlab='', ylab='Regime')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Bull','Bear'), fill=1:2, bty='n')
# Obtain S&P500 data from 2004 onwards and
# create the returns stream from this
getSymbols( "^GSPC", from="2004-01-01" )
gspcRets = diff( log( Cl( GSPC ) ) )
returns = as.numeric(gspcRets)
# Fit a Hidden Markov Model with two states
# to the S&P500 returns stream
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 2, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Plot the returns stream and the posterior
# probabilities of the separate regimes
layout(1:2)
plot(returns, type='l', main='Regime Detection', xlab='', ylab='Returns')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Regime #1','Regime #2'), fill=1:2, bty='n')
# Fit a Hidden Markov Model with three states to the S&P500 returns stream
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 3, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Plot the returns stream
# probabilities of the separate regimes
layout(1:2)
plot(returns, type='l', main='Regime Detection', xlab='', ylab='Returns')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='bottomleft', c('Regime #1','Regime #2', 'Regime #3'), fill=1:3, bty='n')
install.packages("depmixS4")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
data
git
where git
summary(HMMfit)
set.seed(1)
HMM<-depmix(list(score~1,skill~1,step_duration~1,incorrect~1,hint~1),data=x_ds,nstates=4,family=list(gaussian(),gaussian(),gaussian(),gaussian(),gaussian()))
# HMM Model
library(depmixS4)
head(x)
librar
library(devtools)
install_github("bs-2011/ALpath")
library(ALpath)
library(ALpath)
task1(3,"stu_0102350af2")
task2("stu_0102350af2")
setwd("C:/Users/user/Desktop/Intern-bitwise/Package/HMM/ALpath/man")
x = readRDS(file = "x.rds")
# Course 1 data
HMMfit  = readRDS(file = "HMMfit.rds")
HMMpost = depmixS4::posterior(HMMfit)
colnames(x)
course1 = x[,c(1,2,3,15,16,17,18,19)]
course1 = cbind(course1,HMMpost$state)
course1 = x[,c(1,2,15,16,17,18,19)]
course1 = cbind(course1,HMMpost$state)
colnames(course1)
colnames(course1)[8] = "hidden_state"
colnames(course1)
# Creating dummy course 2 having some common concepts with course 1
course2 = course1
#  Generate random indices which will have common concepts
ind <- sapply( unique( course1$Anon.Student.Id ) , function(x) sample( which(course1$Anon.Student.Id==x) , min(10, length(c(which(course1$Anon.Student.Id==x))))))
head(ind)
#  Generate random indices which will have common concepts
ind <- sapply( unique( course1$Anon.Student.Id ) , function(x) sample( which(course1$Anon.Student.Id==x) , min(15, length(c(which(course1$Anon.Student.Id==x))))))
#  Generate random indices which will have common concepts
ind <- sapply( unique( course1$Anon.Student.Id ) , function(x) sample( which(course1$Anon.Student.Id==x) , min(15, length(c(which(course1$Anon.Student.Id==x))))))
head(ind)
ind <- sapply( unique( z$Anon.Student.Id ) , function(x) sample( which(z$Anon.Student.Id==x) , min(1)))
ind <- sapply( unique( course1$Anon.Student.Id ) , function(x) sample( which(course1$Anon.Student.Id==x) , min(1)))
ind <- sapply( unique( course1$Anon.Student.Id ) , function(x) sample( which(course1$Anon.Student.Id==x) , min(2)))
ind
#  Generate random indices which will have common concepts
ind <- sapply( unique( course1$Anon.Student.Id ) , function(x) sample( which(course1$Anon.Student.Id==x) , min(15, length(c(which(course1$Anon.Student.Id==x))))))
#  Subset data.frame
pre_order =   course1[ c(unlist(ind)),]
c(unlist(ind))
class( c(unlist(ind)))
colnames(course2)
course2[,c(3:7)] = "xyz"
pre_order$KC.SubSkills._01 = as.character(pre_order$KC.SubSkills._01)
pre_order$KC.SubSkills._02 = as.character(pre_order$KC.SubSkills._02)
pre_order$KC.SubSkills._03 = as.character(pre_order$KC.SubSkills._03)
pre_order$KC.KTracedSkills._1 = as.character(pre_order$KC.KTracedSkills._1)
pre_order$KC.KTracedSkills._2 = as.character(pre_order$KC.KTracedSkills._2)
# Adding common concepts of course1 in  course2
course2[index_common,] = pre_order
#index of same concepts
index_common = c(unlist(ind))
# Adding common concepts of course1 in  course2
course2[index_common,] = pre_order
head(course2)
# Finding the hidden states of the common concepts
course2$hidden_state = 0
course2$hidden_state[index_common,] = pre_order$hidden_state
course2$hidden_state[index_common] = pre_order$hidden_state
