ylab='Sample Percentiles', main="P-P-Plot" )
abline(0,1, col=2)
lmodel$df.residual
MyData <- read.csv(file="final.csv", header=TRUE, sep=",")
num <-sapply(MyData, is.numeric)
mydata <- MyData[,num]
lmodel <- lm(Total.Household.Income~.,mydata)
plot(residuals(lmodel))
hist(residuals(lmodel), probability=T, col='lightblue')
lines(density(residuals(lmodel)), col=2, lwd=2)
qqnorm(residuals(lmodel))
qqline(residuals(lmodel), col=2,lwd=2)
a<-pnorm(residuals(lmodel), 0, summary(lmodel)$sigma)
plot( ppoints(length(a)), sort(a), xlab='Theoretical Percentiles',
ylab='Sample Percentiles', main="P-P-Plot" )
abline(0,1, col=2)
nrow(mydata)
length(mydata)
str(mydata)
hist(residuals(lmodel), probability=T, col='lightblue',breaks = sqrt(nrow(mydata)))
lines(density(residuals(lmodel)), col=2, lwd=2)
hist(residuals(lmodel), probability=T, col='lightblue',breaks = 50)
lines(density(residuals(lmodel)), col=2, lwd=2)
plot(residuals(lmodel))
hist(residuals(lmodel), probability=T, col='lightblue',breaks = 50)
lines(density(residuals(lmodel)), col=2, lwd=2)
qqnorm(residuals(lmodel))
qqline(residuals(lmodel), col=2,lwd=2)
a<-pnorm(residuals(lmodel), 0, summary(lmodel)$sigma)
plot( ppoints(length(a)), sort(a), xlab='Theoretical Percentiles',
ylab='Sample Percentiles', main="P-P-Plot" )
abline(0,1, col=2)
summary(lmodel)
install.packages("car")
library(car)
outlierTest(lmodel)
summary(lmodel)
outlierTest(lmodel)
max(lmodel$residuals)
min(lmodel$residuals)
# Import the necessary packages and set
# random seed for replication consistency
install.packages('depmixS4')
install.packages('quantmod')
library('depmixS4')
library('quantmod')
set.seed(1)
# Create the parameters for the bull and
# bear market returns distributions
Nk_lower <- 50
Nk_upper <- 150
bull_mean <- 0.1
bull_var <- 0.1
bear_mean <- -0.05
bear_var <- 0.2
# Create the list of durations (in days) for each regime
days <- replicate(5, sample(Nk_lower:Nk_upper, 1))
# Create the various bull and bear markets returns
market_bull_1 <- rnorm( days[1], bull_mean, bull_var )
market_bear_2 <- rnorm( days[2], bear_mean, bear_var )
market_bull_3 <- rnorm( days[3], bull_mean, bull_var )
market_bear_4 <- rnorm( days[4], bear_mean, bear_var )
market_bull_5 <- rnorm( days[5], bull_mean, bull_var )
# Create the list of true regime states and full returns list
true_regimes <- c( rep(1,days[1]), rep(2,days[2]), rep(1,days[3]), rep(2,days[4]), rep(1,days[5]))
returns <- c( market_bull_1, market_bear_2, market_bull_3, market_bear_4, market_bull_5)
# Create and fit the Hidden Markov Model
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 2, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Output both the true regimes and the
# posterior probabilities of the regimes
layout(1:2)
plot(post_probs$state, type='s', main='True Regimes', xlab='', ylab='Regime')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Bull','Bear'), fill=1:2, bty='n')
# Obtain S&P500 data from 2004 onwards and
# create the returns stream from this
getSymbols( "^GSPC", from="2004-01-01" )
gspcRets = diff( log( Cl( GSPC ) ) )
returns = as.numeric(gspcRets)
# Fit a Hidden Markov Model with two states
# to the S&P500 returns stream
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 2, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Plot the returns stream and the posterior
# probabilities of the separate regimes
layout(1:2)
plot(returns, type='l', main='Regime Detection', xlab='', ylab='Returns')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Regime #1','Regime #2'), fill=1:2, bty='n')
# Fit a Hidden Markov Model with three states to the S&P500 returns stream
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 3, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Plot the returns stream
# probabilities of the separate regimes
layout(1:2)
plot(returns, type='l', main='Regime Detection', xlab='', ylab='Returns')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='bottomleft', c('Regime #1','Regime #2', 'Regime #3'), fill=1:3, bty='n')
install.packages("depmixS4")
# Create the parameters for the bull and
# bear market returns distributions
Nk_lower <- 50
Nk_upper <- 150
bull_mean <- 0.1
bull_var <- 0.1
bear_mean <- -0.05
bear_var <- 0.2
# Create the list of durations (in days) for each regime
days <- replicate(5, sample(Nk_lower:Nk_upper, 1))
# Create the various bull and bear markets returns
market_bull_1 <- rnorm( days[1], bull_mean, bull_var )
market_bear_2 <- rnorm( days[2], bear_mean, bear_var )
market_bull_3 <- rnorm( days[3], bull_mean, bull_var )
market_bear_4 <- rnorm( days[4], bear_mean, bear_var )
market_bull_5 <- rnorm( days[5], bull_mean, bull_var )
# Create the list of true regime states and full returns list
true_regimes <- c( rep(1,days[1]), rep(2,days[2]), rep(1,days[3]), rep(2,days[4]), rep(1,days[5]))
returns <- c( market_bull_1, market_bear_2, market_bull_3, market_bear_4, market_bull_5)
# Create and fit the Hidden Markov Model
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 2, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Output both the true regimes and the
# posterior probabilities of the regimes
layout(1:2)
plot(post_probs$state, type='s', main='True Regimes', xlab='', ylab='Regime')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Bull','Bear'), fill=1:2, bty='n')
# Obtain S&P500 data from 2004 onwards and
# create the returns stream from this
getSymbols( "^GSPC", from="2004-01-01" )
gspcRets = diff( log( Cl( GSPC ) ) )
returns = as.numeric(gspcRets)
# Fit a Hidden Markov Model with two states
# to the S&P500 returns stream
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 2, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Plot the returns stream and the posterior
# probabilities of the separate regimes
layout(1:2)
plot(returns, type='l', main='Regime Detection', xlab='', ylab='Returns')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Regime #1','Regime #2'), fill=1:2, bty='n')
# Fit a Hidden Markov Model with three states to the S&P500 returns stream
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 3, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Plot the returns stream
# probabilities of the separate regimes
layout(1:2)
plot(returns, type='l', main='Regime Detection', xlab='', ylab='Returns')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='bottomleft', c('Regime #1','Regime #2', 'Regime #3'), fill=1:3, bty='n')
# Import the necessary packages and set
# random seed for replication consistency
install.packages('depmixS4')
install.packages('quantmod')
library('depmixS4')
library('quantmod')
set.seed(1)
# Create the parameters for the bull and
# bear market returns distributions
Nk_lower <- 50
Nk_upper <- 150
bull_mean <- 0.1
bull_var <- 0.1
bear_mean <- -0.05
bear_var <- 0.2
# Create the list of durations (in days) for each regime
days <- replicate(5, sample(Nk_lower:Nk_upper, 1))
# Create the various bull and bear markets returns
market_bull_1 <- rnorm( days[1], bull_mean, bull_var )
market_bear_2 <- rnorm( days[2], bear_mean, bear_var )
market_bull_3 <- rnorm( days[3], bull_mean, bull_var )
market_bear_4 <- rnorm( days[4], bear_mean, bear_var )
market_bull_5 <- rnorm( days[5], bull_mean, bull_var )
# Create the list of true regime states and full returns list
true_regimes <- c( rep(1,days[1]), rep(2,days[2]), rep(1,days[3]), rep(2,days[4]), rep(1,days[5]))
returns <- c( market_bull_1, market_bear_2, market_bull_3, market_bear_4, market_bull_5)
# Create and fit the Hidden Markov Model
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 2, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Output both the true regimes and the
# posterior probabilities of the regimes
layout(1:2)
plot(post_probs$state, type='s', main='True Regimes', xlab='', ylab='Regime')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Bull','Bear'), fill=1:2, bty='n')
# Obtain S&P500 data from 2004 onwards and
# create the returns stream from this
getSymbols( "^GSPC", from="2004-01-01" )
gspcRets = diff( log( Cl( GSPC ) ) )
returns = as.numeric(gspcRets)
# Fit a Hidden Markov Model with two states
# to the S&P500 returns stream
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 2, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Plot the returns stream and the posterior
# probabilities of the separate regimes
layout(1:2)
plot(returns, type='l', main='Regime Detection', xlab='', ylab='Returns')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Regime #1','Regime #2'), fill=1:2, bty='n')
# Fit a Hidden Markov Model with three states to the S&P500 returns stream
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 3, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Plot the returns stream
# probabilities of the separate regimes
layout(1:2)
plot(returns, type='l', main='Regime Detection', xlab='', ylab='Returns')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='bottomleft', c('Regime #1','Regime #2', 'Regime #3'), fill=1:3, bty='n')
install.packages("depmixS4")
install.packages("quantmod")
install.packages("quantmod")
# Import the necessary packages and set
# random seed for replication consistency
install.packages('depmixS4')
install.packages('quantmod')
library('depmixS4')
library('quantmod')
set.seed(1)
# Create the parameters for the bull and
# bear market returns distributions
Nk_lower <- 50
Nk_upper <- 150
bull_mean <- 0.1
bull_var <- 0.1
bear_mean <- -0.05
bear_var <- 0.2
# Create the list of durations (in days) for each regime
days <- replicate(5, sample(Nk_lower:Nk_upper, 1))
# Create the various bull and bear markets returns
market_bull_1 <- rnorm( days[1], bull_mean, bull_var )
market_bear_2 <- rnorm( days[2], bear_mean, bear_var )
market_bull_3 <- rnorm( days[3], bull_mean, bull_var )
market_bear_4 <- rnorm( days[4], bear_mean, bear_var )
market_bull_5 <- rnorm( days[5], bull_mean, bull_var )
# Create the list of true regime states and full returns list
true_regimes <- c( rep(1,days[1]), rep(2,days[2]), rep(1,days[3]), rep(2,days[4]), rep(1,days[5]))
returns <- c( market_bull_1, market_bear_2, market_bull_3, market_bear_4, market_bull_5)
# Create and fit the Hidden Markov Model
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 2, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Output both the true regimes and the
# posterior probabilities of the regimes
layout(1:2)
plot(post_probs$state, type='s', main='True Regimes', xlab='', ylab='Regime')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Bull','Bear'), fill=1:2, bty='n')
# Obtain S&P500 data from 2004 onwards and
# create the returns stream from this
getSymbols( "^GSPC", from="2004-01-01" )
gspcRets = diff( log( Cl( GSPC ) ) )
returns = as.numeric(gspcRets)
# Fit a Hidden Markov Model with two states
# to the S&P500 returns stream
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 2, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Plot the returns stream and the posterior
# probabilities of the separate regimes
layout(1:2)
plot(returns, type='l', main='Regime Detection', xlab='', ylab='Returns')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Regime #1','Regime #2'), fill=1:2, bty='n')
# Fit a Hidden Markov Model with three states to the S&P500 returns stream
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 3, data=data.frame(returns=returns))
# Import the necessary packages and set
# random seed for replication consistency
install.packages('depmixS4')
install.packages('quantmod')
# Import the necessary packages and set
# random seed for replication consistency
install.packages('depmixS4')
install.packages('quantmod')
library('depmixS4')
library('quantmod')
set.seed(1)
# Create the parameters for the bull and
# bear market returns distributions
Nk_lower <- 50
Nk_upper <- 150
bull_mean <- 0.1
bull_var <- 0.1
bear_mean <- -0.05
bear_var <- 0.2
# Create the list of durations (in days) for each regime
days <- replicate(5, sample(Nk_lower:Nk_upper, 1))
# Create the various bull and bear markets returns
market_bull_1 <- rnorm( days[1], bull_mean, bull_var )
market_bear_2 <- rnorm( days[2], bear_mean, bear_var )
market_bull_3 <- rnorm( days[3], bull_mean, bull_var )
market_bear_4 <- rnorm( days[4], bear_mean, bear_var )
market_bull_5 <- rnorm( days[5], bull_mean, bull_var )
# Create the list of true regime states and full returns list
true_regimes <- c( rep(1,days[1]), rep(2,days[2]), rep(1,days[3]), rep(2,days[4]), rep(1,days[5]))
returns <- c( market_bull_1, market_bear_2, market_bull_3, market_bear_4, market_bull_5)
# Create and fit the Hidden Markov Model
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 2, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Output both the true regimes and the
# posterior probabilities of the regimes
layout(1:2)
plot(post_probs$state, type='s', main='True Regimes', xlab='', ylab='Regime')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Bull','Bear'), fill=1:2, bty='n')
# Obtain S&P500 data from 2004 onwards and
# create the returns stream from this
getSymbols( "^GSPC", from="2004-01-01" )
gspcRets = diff( log( Cl( GSPC ) ) )
returns = as.numeric(gspcRets)
# Fit a Hidden Markov Model with two states
# to the S&P500 returns stream
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 2, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Plot the returns stream and the posterior
# probabilities of the separate regimes
layout(1:2)
plot(returns, type='l', main='Regime Detection', xlab='', ylab='Returns')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Regime #1','Regime #2'), fill=1:2, bty='n')
# Fit a Hidden Markov Model with three states to the S&P500 returns stream
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 3, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Plot the returns stream
# probabilities of the separate regimes
layout(1:2)
plot(returns, type='l', main='Regime Detection', xlab='', ylab='Returns')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='bottomleft', c('Regime #1','Regime #2', 'Regime #3'), fill=1:3, bty='n')
install.packages("depmixS4")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
data
git
where git
summary(HMMfit)
set.seed(1)
HMM<-depmix(list(score~1,skill~1,step_duration~1,incorrect~1,hint~1),data=x_ds,nstates=4,family=list(gaussian(),gaussian(),gaussian(),gaussian(),gaussian()))
# HMM Model
library(depmixS4)
head(x)
librar
library(devtools)
install_github("bs-2011/ALpath")
library(ALpath)
library(ALpath)
task1(3,"stu_0102350af2")
task2("stu_0102350af2")
#library(depmixS4)
HMMfit  = readRDS(file = "./man/HMMfit.rds")
setwd("C:/Users/user/Desktop/Intern-bitwise/Package/ALpath---HMM/ALpath")
#library(depmixS4)
HMMfit  = readRDS(file = "./man/HMMfit.rds")
x = readRDS(file = "./man/x.rds")
HMMpost = depmixS4::posterior(HMMfit)
x = cbind(x,HMMpost$state)
tmp = HMMfit@trDens
transition_mat = matrix(unlist(tmp),ncol=4, byrow=T)
knitr::opts_chunk$set(echo = TRUE)
# Plot of posterior probabilities of Student ID - "stu_0102350af2"
layout(1:5)
plot(HMMpost$state[25:199], type='l', main='State in which student is in', xlab='', ylab='state',abline(v = c(4,28,46,96,159)))
# Plot of posterior probabilities
layout(1:5)
plot(HMMpost$state, type='l', main='State in which student is in', xlab='', ylab='state')
plot(HMMpost$S1, type='l', main='Probab. of State 1', xlab='', ylab='Prob. S_1',col = "Green")
plot(HMMpost$S2, type='l', main='Probab. of State 2', xlab='', ylab='Prob. S_2',col = "Blue")
plot(HMMpost$S3, type='l', main='Probab. of State 3', xlab='', ylab='Prob. S_3',col = "Red")
plot(HMMpost$S4, type='l', main='Probab. of State 4', xlab='', ylab='Prob. S_4',col = "Yellow")
par(mar=c(1,1,1,1))
# Plot of posterior probabilities
layout(1:5)
plot(HMMpost$state, type='l', main='State in which student is in', xlab='', ylab='state')
plot(HMMpost$S1, type='l', main='Probab. of State 1', xlab='', ylab='Prob. S_1',col = "Green")
plot(HMMpost$S2, type='l', main='Probab. of State 2', xlab='', ylab='Prob. S_2',col = "Blue")
plot(HMMpost$S3, type='l', main='Probab. of State 3', xlab='', ylab='Prob. S_3',col = "Red")
plot(HMMpost$S4, type='l', main='Probab. of State 4', xlab='', ylab='Prob. S_4',col = "Yellow")
# Plot of posterior probabilities of Student ID - "stu_0102350af2"
layout(1:5)
plot(HMMpost$state[25:199], type='l', main='State in which student is in', xlab='', ylab='state',abline(v = c(4,28,46,96,159)))
plot(HMMpost$S1[25:199], type='l', main='Probab. of State 1', xlab='Topics', ylab='Prob. S_1',col = "Brown",abline(v = c(4,28,46,96,159)))
plot(HMMpost$S2[25:199], type='l', main='Probab. of State 2', xlab='Topics', ylab='Prob. S_2',col = "Green",abline(v = c(4,28,46,96,159)))
plot(HMMpost$S3[25:199], type='l', main='Probab. of State 3', xlab='Topics', ylab='Prob. S_3',col = "Red",abline(v = c(4,28,46,96,159)))
plot(HMMpost$S4[25:199], type='l', main='Probab. of State 4', xlab='Topics', ylab='Prob. S_4',col = "Yellow",abline(v = c(4,28,46,96,159)))
# Plot of posterior probabilities of Student ID - "stu_0102350af2"
layout(1:5)
plot(HMMpost$state[25:199], type='l', main='State in which student is in', xlab='', ylab='state',abline(v = c(4,28,46,96,159)))
# Plot of posterior probabilities
layout(1:5)
plot(HMMpost$state, type='l', main='State in which student is in', xlab='', ylab='state')
plot(HMMpost$S1, type='l', main='Probab. of State 1', xlab='', ylab='Prob. S_1',col = "Green")
plot(HMMpost$S2, type='l', main='Probab. of State 2', xlab='', ylab='Prob. S_2',col = "Blue")
plot(HMMpost$S3, type='l', main='Probab. of State 3', xlab='', ylab='Prob. S_3',col = "Red")
plot(HMMpost$S4, type='l', main='Probab. of State 4', xlab='', ylab='Prob. S_4',col = "Yellow")
par(mar=c(1,1,1,1))
# Plot of posterior probabilities of Student ID - "stu_0102350af2"
par(mar=c(1,1,1,1))
layout(1:5)
plot(HMMpost$state[25:199], type='l', main='State in which student is in', xlab='', ylab='state',abline(v = c(4,28,46,96,159)))
# Plot of posterior probabilities of Student ID - "stu_0102350af2"
par(mar=c(1,1,1,1))
# Plot of posterior probabilities
layout(1:5)
plot(HMMpost$state, type='l', main='State in which student is in', xlab='', ylab='state')
plot(HMMpost$S1, type='l', main='Probab. of State 1', xlab='', ylab='Prob. S_1',col = "Green")
plot(HMMpost$S2, type='l', main='Probab. of State 2', xlab='', ylab='Prob. S_2',col = "Blue")
plot(HMMpost$S3, type='l', main='Probab. of State 3', xlab='', ylab='Prob. S_3',col = "Red")
plot(HMMpost$S4, type='l', main='Probab. of State 4', xlab='', ylab='Prob. S_4',col = "Yellow")
layout(1:5)
plot(HMMpost$state[25:199], type='l', main='State in which student is in', xlab='', ylab='state',abline(v = c(4,28,46,96,159)))
plot(HMMpost$S1[25:199], type='l', main='Probab. of State 1', xlab='Topics', ylab='Prob. S_1',col = "Brown",abline(v = c(4,28,46,96,159)))
plot(HMMpost$S2[25:199], type='l', main='Probab. of State 2', xlab='Topics', ylab='Prob. S_2',col = "Green",abline(v = c(4,28,46,96,159)))
plot(HMMpost$S3[25:199], type='l', main='Probab. of State 3', xlab='Topics', ylab='Prob. S_3',col = "Red",abline(v = c(4,28,46,96,159)))
plot(HMMpost$S4[25:199], type='l', main='Probab. of State 4', xlab='Topics', ylab='Prob. S_4',col = "Yellow",abline(v = c(4,28,46,96,159)))
# Plot of posterior probabilities
layout(1:5)
plot(HMMpost$state, type='l', main='State in which all the students are in particular course', xlab='', ylab='state')
plot(HMMpost$S1, type='l', main='Probab. of State 1', xlab='', ylab='Prob. S_1',col = "Green")
plot(HMMpost$S2, type='l', main='Probab. of State 2', xlab='', ylab='Prob. S_2',col = "Blue")
plot(HMMpost$S3, type='l', main='Probab. of State 3', xlab='', ylab='Prob. S_3',col = "Red")
plot(HMMpost$S4, type='l', main='Probab. of State 4', xlab='', ylab='Prob. S_4',col = "Yellow")
# Plot of posterior probabilities
layout(1:5)
plot(HMMpost$state[25:199], type='l', main='State in which student "stu_0102350af2', xlab='', ylab='state',abline(v = c(4,28,46,96,159)))
plot(HMMpost$S1[25:199], type='l', main='Probab. of State 1', xlab='Topics', ylab='Prob. S_1',col = "Brown",abline(v = c(4,28,46,96,159)))
plot(HMMpost$S2[25:199], type='l', main='Probab. of State 2', xlab='Topics', ylab='Prob. S_2',col = "Green",abline(v = c(4,28,46,96,159)))
plot(HMMpost$S3[25:199], type='l', main='Probab. of State 3', xlab='Topics', ylab='Prob. S_3',col = "Red",abline(v = c(4,28,46,96,159)))
plot(HMMpost$S4[25:199], type='l', main='Probab. of State 4', xlab='Topics', ylab='Prob. S_4',col = "Yellow",abline(v = c(4,28,46,96,159)))
par(mar=c(1,1,1,1))
# Plot of posterior probabilities
layout(1:5)
plot(HMMpost$state, type='l', main='State in which all the student are in', xlab='', ylab='state')
plot(HMMpost$S1, type='l', main='Probab. of State 1', xlab='', ylab='Prob. S_1',col = "Green")
plot(HMMpost$S2, type='l', main='Probab. of State 2', xlab='', ylab='Prob. S_2',col = "Blue")
plot(HMMpost$S3, type='l', main='Probab. of State 3', xlab='', ylab='Prob. S_3',col = "Red")
plot(HMMpost$S4, type='l', main='Probab. of State 4', xlab='', ylab='Prob. S_4',col = "Yellow")
# Plot of posterior probabilities of Student ID - "stu_0102350af2"
layout(1:5)
plot(HMMpost$state[25:199], type='l', main='State in which student "stu_0102350af2" is in', xlab='', ylab='state',abline(v = c(4,28,46,96,159)))
plot(HMMpost$S1[25:199], type='l', main='Probab. of State 1', xlab='Topics', ylab='Prob. S_1',col = "Brown",abline(v = c(4,28,46,96,159)))
plot(HMMpost$S2[25:199], type='l', main='Probab. of State 2', xlab='Topics', ylab='Prob. S_2',col = "Green",abline(v = c(4,28,46,96,159)))
plot(HMMpost$S3[25:199], type='l', main='Probab. of State 3', xlab='Topics', ylab='Prob. S_3',col = "Red",abline(v = c(4,28,46,96,159)))
plot(HMMpost$S4[25:199], type='l', main='Probab. of State 4', xlab='Topics', ylab='Prob. S_4',col = "Yellow",abline(v = c(4,28,46,96,159)))
knitr::opts_chunk$set(echo = TRUE)
par(mar=c(1,1,1,1))
# Plot of posterior probabilities
layout(1:5)
plot(HMMpost$state, type='l', main='State in which all the students are in particular course', xlab='', ylab='state')
plot(HMMpost$S1, type='l', main='Probab. of State 1', xlab='', ylab='Prob. S_1',col = "Green")
plot(HMMpost$S2, type='l', main='Probab. of State 2', xlab='', ylab='Prob. S_2',col = "Blue")
plot(HMMpost$S3, type='l', main='Probab. of State 3', xlab='', ylab='Prob. S_3',col = "Red")
plot(HMMpost$S4, type='l', main='Probab. of State 4', xlab='', ylab='Prob. S_4',col = "Yellow")
# Plot of posterior probabilities
layout(1:5)
plot(HMMpost$state[25:199], type='l', main='State in which student "stu_0102350af2', xlab='', ylab='state',abline(v = c(4,28,46,96,159)))
plot(HMMpost$S1[25:199], type='l', main='Probab. of State 1', xlab='Topics', ylab='Prob. S_1',col = "Brown",abline(v = c(4,28,46,96,159)))
plot(HMMpost$S2[25:199], type='l', main='Probab. of State 2', xlab='Topics', ylab='Prob. S_2',col = "Green",abline(v = c(4,28,46,96,159)))
plot(HMMpost$S3[25:199], type='l', main='Probab. of State 3', xlab='Topics', ylab='Prob. S_3',col = "Red",abline(v = c(4,28,46,96,159)))
plot(HMMpost$S4[25:199], type='l', main='Probab. of State 4', xlab='Topics', ylab='Prob. S_4',col = "Yellow",abline(v = c(4,28,46,96,159)))
HMMfit  = readRDS(file = "./man/HMMfit.rds")
HMMfit  = readRDS(file = "HMMfit.rds")
getwd()
HMMfit  = readRDS(file = "HMMfit.rds")
HMMfit  = readRDS(file = "HMMfit.rds")
# x = readRDS(file = "x.rds")
HMMpost = depmixS4::posterior(HMMfit)
par(mar=c(1,1,1,1))
# Plot of posterior probabilities
layout(1:5)
plot(HMMpost$state, type='l', main='State in which all the students are in particular course', xlab='', ylab='state')
plot(HMMpost$S1, type='l', main='Probab. of State 1', xlab='', ylab='Prob. S_1',col = "Green")
plot(HMMpost$S2, type='l', main='Probab. of State 2', xlab='', ylab='Prob. S_2',col = "Blue")
plot(HMMpost$S3, type='l', main='Probab. of State 3', xlab='', ylab='Prob. S_3',col = "Red")
plot(HMMpost$S4, type='l', main='Probab. of State 4', xlab='', ylab='Prob. S_4',col = "Yellow")
# Plot of posterior probabilities
layout(1:5)
plot(HMMpost$state[25:199], type='l', main='State in which student "stu_0102350af2', xlab='', ylab='state',abline(v = c(4,28,46,96,159)))
plot(HMMpost$S1[25:199], type='l', main='Probab. of State 1', xlab='Topics', ylab='Prob. S_1',col = "Brown",abline(v = c(4,28,46,96,159)))
plot(HMMpost$S2[25:199], type='l', main='Probab. of State 2', xlab='Topics', ylab='Prob. S_2',col = "Green",abline(v = c(4,28,46,96,159)))
plot(HMMpost$S3[25:199], type='l', main='Probab. of State 3', xlab='Topics', ylab='Prob. S_3',col = "Red",abline(v = c(4,28,46,96,159)))
plot(HMMpost$S4[25:199], type='l', main='Probab. of State 4', xlab='Topics', ylab='Prob. S_4',col = "Yellow",abline(v = c(4,28,46,96,159)))
